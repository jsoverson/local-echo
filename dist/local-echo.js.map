{"version":3,"sources":["webpack://LocalEchoController/webpack/bootstrap","webpack://LocalEchoController/./node_modules/shell-quote/index.js","webpack://LocalEchoController/./node_modules/jsonify/index.js","webpack://LocalEchoController/./node_modules/jsonify/lib/parse.js","webpack://LocalEchoController/./node_modules/jsonify/lib/stringify.js","webpack://LocalEchoController/./node_modules/array-map/index.js","webpack://LocalEchoController/./node_modules/array-filter/index.js","webpack://LocalEchoController/./node_modules/array-reduce/index.js","webpack://LocalEchoController/./lib/HistoryController.js","webpack://LocalEchoController/./lib/Utils.js","webpack://LocalEchoController/./lib/LocalEchoController.js","webpack://LocalEchoController/./index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","json","undefined","JSON","require","map","filter","reduce","quote","xs","op","replace","test","String","join","CONTROL","BAREWORD","SINGLE_QUOTE","DOUBLE_QUOTE","TOKEN","Math","pow","random","toString","parse","env","opts","mapped","chunker","RegExp","match","Boolean","commented","j","BS","escape","esc","out","isGlob","len","length","charAt","parseEnvVar","comment","slice","pattern","varend","varname","Error","substr","indexOf","index","_","pre","stringify","getVar","prev","arg","concat","acc","split","x","at","ch","text","escapee","\"","\\","/","b","f","error","message","next","number","string","isFinite","hex","uffff","parseInt","fromCharCode","white","array","push","word","source","reviver","result","walk","holder","k","v","","gap","indent","rep","escapable","meta","\b","\t","\n","\f","\r","lastIndex","a","charCodeAt","replacer","space","str","partial","mind","toJSON","apply","res","hasOwn","arr","fn","ret","hasAcc","arguments","HistoryController","size","_classCallCheck","this","entries","cursor","entry","trim","pop","idx","max","min","wordBoundaries","input","leftSide","words","rx","exec","closestLeftBoundary","offset","found","reverse","find","offsetToColRow","maxCols","row","col","countLines","hasTailingWhitespace","LocalEchoController","term","options","LocalEchoController_classCallCheck","on","handleTermData","handleTermResize","history","historySize","maxAutocompleteEntries","_autocompleteHandlers","_active","_input","_cursor","_activePrompt","_activeCharPrompt","_termSize","cols","rows","_len","args","Array","_key","findIndex","e","splice","prompt","_this","continuationPrompt","Promise","resolve","reject","write","_this2","reason","print","normInput","items","padding","println","itemWidth","width","item","wideCols","floor","wideRows","ceil","rowStr","repeat","applyPrompts","currentPrompt","allRows","_offsetToColRow","applyPromptOffset","moveRows","newInput","clearInput","newPrompt","newCursor","newLines","_offsetToColRow2","moveUpRows","callback","_this3","setCursor","resume","setInput","then","inputWithPrompt","_offsetToColRow3","prevCol","prevRow","_offsetToColRow4","newCol","newRow","dir","num","backspace","data","_this4","normData","from","forEach","handleData","_this5","ofs","ord","getPrevious","getNext","handleCursorMove","handleCursorErase","endsWith","isIncompleteInput","handleReadComplete","handleCursorInsert","inputFragment","hasTailingSpace","candidates","callbacks","tokens","expr","_ref","_toConsumableArray","console","txt","startsWith","collectAutocompleteCandidates","sort","lastToken","getLastToken","printAndRestartPrompt","printWide","readChar","yn","rewind","__webpack_exports__"],"mappings":"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","file":"local-echo.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n","var json = typeof JSON !== undefined ? JSON : require('jsonify');\nvar map = require('array-map');\nvar filter = require('array-filter');\nvar reduce = require('array-reduce');\n\nexports.quote = function (xs) {\n    return map(xs, function (s) {\n        if (s && typeof s === 'object') {\n            return s.op.replace(/(.)/g, '\\\\$1');\n        }\n        else if (/[\"\\s]/.test(s) && !/'/.test(s)) {\n            return \"'\" + s.replace(/(['\\\\])/g, '\\\\$1') + \"'\";\n        }\n        else if (/[\"'\\s]/.test(s)) {\n            return '\"' + s.replace(/([\"\\\\$`!])/g, '\\\\$1') + '\"';\n        }\n        else {\n            return String(s).replace(/([#!\"$&'()*,:;<=>?@\\[\\\\\\]^`{|}])/g, '\\\\$1'); \n        }\n    }).join(' ');\n};\n\nvar CONTROL = '(?:' + [\n    '\\\\|\\\\|', '\\\\&\\\\&', ';;', '\\\\|\\\\&', '[&;()|<>]'\n].join('|') + ')';\nvar META = '|&;()<> \\\\t';\nvar BAREWORD = '(\\\\\\\\[\\'\"' + META + ']|[^\\\\s\\'\"' + META + '])+';\nvar SINGLE_QUOTE = '\"((\\\\\\\\\"|[^\"])*?)\"';\nvar DOUBLE_QUOTE = '\\'((\\\\\\\\\\'|[^\\'])*?)\\'';\n\nvar TOKEN = '';\nfor (var i = 0; i < 4; i++) {\n    TOKEN += (Math.pow(16,8)*Math.random()).toString(16);\n}\n\nexports.parse = function (s, env, opts) {\n    var mapped = parse(s, env, opts);\n    if (typeof env !== 'function') return mapped;\n    return reduce(mapped, function (acc, s) {\n        if (typeof s === 'object') return acc.concat(s);\n        var xs = s.split(RegExp('(' + TOKEN + '.*?' + TOKEN + ')', 'g'));\n        if (xs.length === 1) return acc.concat(xs[0]);\n        return acc.concat(map(filter(xs, Boolean), function (x) {\n            if (RegExp('^' + TOKEN).test(x)) {\n                return json.parse(x.split(TOKEN)[1]);\n            }\n            else return x;\n        }));\n    }, []);\n};\n\nfunction parse (s, env, opts) {\n    var chunker = new RegExp([\n        '(' + CONTROL + ')', // control chars\n        '(' + BAREWORD + '|' + SINGLE_QUOTE + '|' + DOUBLE_QUOTE + ')*'\n    ].join('|'), 'g');\n    var match = filter(s.match(chunker), Boolean);\n    var commented = false;\n\n    if (!match) return [];\n    if (!env) env = {};\n    if (!opts) opts = {};\n    return map(match, function (s, j) {\n        if (commented) {\n            return;\n        }\n        if (RegExp('^' + CONTROL + '$').test(s)) {\n            return { op: s };\n        }\n\n        // Hand-written scanner/parser for Bash quoting rules:\n        //\n        //  1. inside single quotes, all characters are printed literally.\n        //  2. inside double quotes, all characters are printed literally\n        //     except variables prefixed by '$' and backslashes followed by\n        //     either a double quote or another backslash.\n        //  3. outside of any quotes, backslashes are treated as escape\n        //     characters and not printed (unless they are themselves escaped)\n        //  4. quote context can switch mid-token if there is no whitespace\n        //     between the two quote contexts (e.g. all'one'\"token\" parses as\n        //     \"allonetoken\")\n        var SQ = \"'\";\n        var DQ = '\"';\n        var DS = '$';\n        var BS = opts.escape || '\\\\';\n        var quote = false;\n        var esc = false;\n        var out = '';\n        var isGlob = false;\n\n        for (var i = 0, len = s.length; i < len; i++) {\n            var c = s.charAt(i);\n            isGlob = isGlob || (!quote && (c === '*' || c === '?'));\n            if (esc) {\n                out += c;\n                esc = false;\n            }\n            else if (quote) {\n                if (c === quote) {\n                    quote = false;\n                }\n                else if (quote == SQ) {\n                    out += c;\n                }\n                else { // Double quote\n                    if (c === BS) {\n                        i += 1;\n                        c = s.charAt(i);\n                        if (c === DQ || c === BS || c === DS) {\n                            out += c;\n                        } else {\n                            out += BS + c;\n                        }\n                    }\n                    else if (c === DS) {\n                        out += parseEnvVar();\n                    }\n                    else {\n                        out += c;\n                    }\n                }\n            }\n            else if (c === DQ || c === SQ) {\n                quote = c;\n            }\n            else if (RegExp('^' + CONTROL + '$').test(c)) {\n                return { op: s };\n            }\n            else if (RegExp('^#$').test(c)) {\n                commented = true;\n                if (out.length){\n                    return [out, { comment: s.slice(i+1) + match.slice(j+1).join(' ') }];\n                }\n                return [{ comment: s.slice(i+1) + match.slice(j+1).join(' ') }];\n            }\n            else if (c === BS) {\n                esc = true;\n            }\n            else if (c === DS) {\n                out += parseEnvVar();\n            }\n            else out += c;\n        }\n\n        if (isGlob) return {op: 'glob', pattern: out};\n\n        return out;\n\n        function parseEnvVar() {\n            i += 1;\n            var varend, varname;\n            //debugger\n            if (s.charAt(i) === '{') {\n                i += 1;\n                if (s.charAt(i) === '}') {\n                    throw new Error(\"Bad substitution: \" + s.substr(i - 2, 3));\n                }\n                varend = s.indexOf('}', i);\n                if (varend < 0) {\n                    throw new Error(\"Bad substitution: \" + s.substr(i));\n                }\n                varname = s.substr(i, varend - i);\n                i = varend;\n            }\n            else if (/[*@#?$!_\\-]/.test(s.charAt(i))) {\n                varname = s.charAt(i);\n                i += 1;\n            }\n            else {\n                varend = s.substr(i).match(/[^\\w\\d_]/);\n                if (!varend) {\n                    varname = s.substr(i);\n                    i = s.length;\n                } else {\n                    varname = s.substr(i, varend.index);\n                    i += varend.index - 1;\n                }\n            }\n            return getVar(null, '', varname);\n        }\n    })\n    // finalize parsed aruments\n    .reduce(function(prev, arg){\n        if (arg === undefined){\n            return prev;\n        }\n        return prev.concat(arg);\n    },[]);\n\n    function getVar (_, pre, key) {\n        var r = typeof env === 'function' ? env(key) : env[key];\n        if (r === undefined) r = '';\n\n        if (typeof r === 'object') {\n            return pre + TOKEN + json.stringify(r) + TOKEN;\n        }\n        else return pre + r;\n    }\n}\n","exports.parse = require('./lib/parse');\nexports.stringify = require('./lib/stringify');\n","var at, // The index of the current character\n    ch, // The current character\n    escapee = {\n        '\"':  '\"',\n        '\\\\': '\\\\',\n        '/':  '/',\n        b:    '\\b',\n        f:    '\\f',\n        n:    '\\n',\n        r:    '\\r',\n        t:    '\\t'\n    },\n    text,\n\n    error = function (m) {\n        // Call error when something is wrong.\n        throw {\n            name:    'SyntaxError',\n            message: m,\n            at:      at,\n            text:    text\n        };\n    },\n    \n    next = function (c) {\n        // If a c parameter is provided, verify that it matches the current character.\n        if (c && c !== ch) {\n            error(\"Expected '\" + c + \"' instead of '\" + ch + \"'\");\n        }\n        \n        // Get the next character. When there are no more characters,\n        // return the empty string.\n        \n        ch = text.charAt(at);\n        at += 1;\n        return ch;\n    },\n    \n    number = function () {\n        // Parse a number value.\n        var number,\n            string = '';\n        \n        if (ch === '-') {\n            string = '-';\n            next('-');\n        }\n        while (ch >= '0' && ch <= '9') {\n            string += ch;\n            next();\n        }\n        if (ch === '.') {\n            string += '.';\n            while (next() && ch >= '0' && ch <= '9') {\n                string += ch;\n            }\n        }\n        if (ch === 'e' || ch === 'E') {\n            string += ch;\n            next();\n            if (ch === '-' || ch === '+') {\n                string += ch;\n                next();\n            }\n            while (ch >= '0' && ch <= '9') {\n                string += ch;\n                next();\n            }\n        }\n        number = +string;\n        if (!isFinite(number)) {\n            error(\"Bad number\");\n        } else {\n            return number;\n        }\n    },\n    \n    string = function () {\n        // Parse a string value.\n        var hex,\n            i,\n            string = '',\n            uffff;\n        \n        // When parsing for string values, we must look for \" and \\ characters.\n        if (ch === '\"') {\n            while (next()) {\n                if (ch === '\"') {\n                    next();\n                    return string;\n                } else if (ch === '\\\\') {\n                    next();\n                    if (ch === 'u') {\n                        uffff = 0;\n                        for (i = 0; i < 4; i += 1) {\n                            hex = parseInt(next(), 16);\n                            if (!isFinite(hex)) {\n                                break;\n                            }\n                            uffff = uffff * 16 + hex;\n                        }\n                        string += String.fromCharCode(uffff);\n                    } else if (typeof escapee[ch] === 'string') {\n                        string += escapee[ch];\n                    } else {\n                        break;\n                    }\n                } else {\n                    string += ch;\n                }\n            }\n        }\n        error(\"Bad string\");\n    },\n\n    white = function () {\n\n// Skip whitespace.\n\n        while (ch && ch <= ' ') {\n            next();\n        }\n    },\n\n    word = function () {\n\n// true, false, or null.\n\n        switch (ch) {\n        case 't':\n            next('t');\n            next('r');\n            next('u');\n            next('e');\n            return true;\n        case 'f':\n            next('f');\n            next('a');\n            next('l');\n            next('s');\n            next('e');\n            return false;\n        case 'n':\n            next('n');\n            next('u');\n            next('l');\n            next('l');\n            return null;\n        }\n        error(\"Unexpected '\" + ch + \"'\");\n    },\n\n    value,  // Place holder for the value function.\n\n    array = function () {\n\n// Parse an array value.\n\n        var array = [];\n\n        if (ch === '[') {\n            next('[');\n            white();\n            if (ch === ']') {\n                next(']');\n                return array;   // empty array\n            }\n            while (ch) {\n                array.push(value());\n                white();\n                if (ch === ']') {\n                    next(']');\n                    return array;\n                }\n                next(',');\n                white();\n            }\n        }\n        error(\"Bad array\");\n    },\n\n    object = function () {\n\n// Parse an object value.\n\n        var key,\n            object = {};\n\n        if (ch === '{') {\n            next('{');\n            white();\n            if (ch === '}') {\n                next('}');\n                return object;   // empty object\n            }\n            while (ch) {\n                key = string();\n                white();\n                next(':');\n                if (Object.hasOwnProperty.call(object, key)) {\n                    error('Duplicate key \"' + key + '\"');\n                }\n                object[key] = value();\n                white();\n                if (ch === '}') {\n                    next('}');\n                    return object;\n                }\n                next(',');\n                white();\n            }\n        }\n        error(\"Bad object\");\n    };\n\nvalue = function () {\n\n// Parse a JSON value. It could be an object, an array, a string, a number,\n// or a word.\n\n    white();\n    switch (ch) {\n    case '{':\n        return object();\n    case '[':\n        return array();\n    case '\"':\n        return string();\n    case '-':\n        return number();\n    default:\n        return ch >= '0' && ch <= '9' ? number() : word();\n    }\n};\n\n// Return the json_parse function. It will have access to all of the above\n// functions and variables.\n\nmodule.exports = function (source, reviver) {\n    var result;\n    \n    text = source;\n    at = 0;\n    ch = ' ';\n    result = value();\n    white();\n    if (ch) {\n        error(\"Syntax error\");\n    }\n\n    // If there is a reviver function, we recursively walk the new structure,\n    // passing each name/value pair to the reviver function for possible\n    // transformation, starting with a temporary root object that holds the result\n    // in an empty key. If there is not a reviver function, we simply return the\n    // result.\n\n    return typeof reviver === 'function' ? (function walk(holder, key) {\n        var k, v, value = holder[key];\n        if (value && typeof value === 'object') {\n            for (k in value) {\n                if (Object.prototype.hasOwnProperty.call(value, k)) {\n                    v = walk(value, k);\n                    if (v !== undefined) {\n                        value[k] = v;\n                    } else {\n                        delete value[k];\n                    }\n                }\n            }\n        }\n        return reviver.call(holder, key, value);\n    }({'': result}, '')) : result;\n};\n","var cx = /[\\u0000\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n    escapable = /[\\\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n    gap,\n    indent,\n    meta = {    // table of character substitutions\n        '\\b': '\\\\b',\n        '\\t': '\\\\t',\n        '\\n': '\\\\n',\n        '\\f': '\\\\f',\n        '\\r': '\\\\r',\n        '\"' : '\\\\\"',\n        '\\\\': '\\\\\\\\'\n    },\n    rep;\n\nfunction quote(string) {\n    // If the string contains no control characters, no quote characters, and no\n    // backslash characters, then we can safely slap some quotes around it.\n    // Otherwise we must also replace the offending characters with safe escape\n    // sequences.\n    \n    escapable.lastIndex = 0;\n    return escapable.test(string) ? '\"' + string.replace(escapable, function (a) {\n        var c = meta[a];\n        return typeof c === 'string' ? c :\n            '\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n    }) + '\"' : '\"' + string + '\"';\n}\n\nfunction str(key, holder) {\n    // Produce a string from holder[key].\n    var i,          // The loop counter.\n        k,          // The member key.\n        v,          // The member value.\n        length,\n        mind = gap,\n        partial,\n        value = holder[key];\n    \n    // If the value has a toJSON method, call it to obtain a replacement value.\n    if (value && typeof value === 'object' &&\n            typeof value.toJSON === 'function') {\n        value = value.toJSON(key);\n    }\n    \n    // If we were called with a replacer function, then call the replacer to\n    // obtain a replacement value.\n    if (typeof rep === 'function') {\n        value = rep.call(holder, key, value);\n    }\n    \n    // What happens next depends on the value's type.\n    switch (typeof value) {\n        case 'string':\n            return quote(value);\n        \n        case 'number':\n            // JSON numbers must be finite. Encode non-finite numbers as null.\n            return isFinite(value) ? String(value) : 'null';\n        \n        case 'boolean':\n        case 'null':\n            // If the value is a boolean or null, convert it to a string. Note:\n            // typeof null does not produce 'null'. The case is included here in\n            // the remote chance that this gets fixed someday.\n            return String(value);\n            \n        case 'object':\n            if (!value) return 'null';\n            gap += indent;\n            partial = [];\n            \n            // Array.isArray\n            if (Object.prototype.toString.apply(value) === '[object Array]') {\n                length = value.length;\n                for (i = 0; i < length; i += 1) {\n                    partial[i] = str(i, value) || 'null';\n                }\n                \n                // Join all of the elements together, separated with commas, and\n                // wrap them in brackets.\n                v = partial.length === 0 ? '[]' : gap ?\n                    '[\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + ']' :\n                    '[' + partial.join(',') + ']';\n                gap = mind;\n                return v;\n            }\n            \n            // If the replacer is an array, use it to select the members to be\n            // stringified.\n            if (rep && typeof rep === 'object') {\n                length = rep.length;\n                for (i = 0; i < length; i += 1) {\n                    k = rep[i];\n                    if (typeof k === 'string') {\n                        v = str(k, value);\n                        if (v) {\n                            partial.push(quote(k) + (gap ? ': ' : ':') + v);\n                        }\n                    }\n                }\n            }\n            else {\n                // Otherwise, iterate through all of the keys in the object.\n                for (k in value) {\n                    if (Object.prototype.hasOwnProperty.call(value, k)) {\n                        v = str(k, value);\n                        if (v) {\n                            partial.push(quote(k) + (gap ? ': ' : ':') + v);\n                        }\n                    }\n                }\n            }\n            \n        // Join all of the member texts together, separated with commas,\n        // and wrap them in braces.\n\n        v = partial.length === 0 ? '{}' : gap ?\n            '{\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + '}' :\n            '{' + partial.join(',') + '}';\n        gap = mind;\n        return v;\n    }\n}\n\nmodule.exports = function (value, replacer, space) {\n    var i;\n    gap = '';\n    indent = '';\n    \n    // If the space parameter is a number, make an indent string containing that\n    // many spaces.\n    if (typeof space === 'number') {\n        for (i = 0; i < space; i += 1) {\n            indent += ' ';\n        }\n    }\n    // If the space parameter is a string, it will be used as the indent string.\n    else if (typeof space === 'string') {\n        indent = space;\n    }\n\n    // If there is a replacer, it must be a function or an array.\n    // Otherwise, throw an error.\n    rep = replacer;\n    if (replacer && typeof replacer !== 'function'\n    && (typeof replacer !== 'object' || typeof replacer.length !== 'number')) {\n        throw new Error('JSON.stringify');\n    }\n    \n    // Make a fake root object containing our value under the key of ''.\n    // Return the result of stringifying the value.\n    return str('', {'': value});\n};\n","module.exports = function (xs, f) {\n    if (xs.map) return xs.map(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        var x = xs[i];\n        if (hasOwn.call(xs, i)) res.push(f(x, i, xs));\n    }\n    return res;\n};\n\nvar hasOwn = Object.prototype.hasOwnProperty;\n","/**\n * Array#filter.\n *\n * @param {Array} arr\n * @param {Function} fn\n * @return {Array}\n */\n\nmodule.exports = function (arr, fn) {\n  if (arr.filter) return arr.filter(fn);\n  var ret = [];\n  for (var i = 0; i < arr.length; i++) {\n    if (!hasOwn.call(arr, i)) continue;\n    if (fn(arr[i], i, arr)) ret.push(arr[i]);\n  }\n  return ret;\n};\n\nvar hasOwn = Object.prototype.hasOwnProperty;\n","var hasOwn = Object.prototype.hasOwnProperty;\n\nmodule.exports = function (xs, f, acc) {\n    var hasAcc = arguments.length >= 3;\n    if (hasAcc && xs.reduce) return xs.reduce(f, acc);\n    if (xs.reduce) return xs.reduce(f);\n    \n    for (var i = 0; i < xs.length; i++) {\n        if (!hasOwn.call(xs, i)) continue;\n        if (!hasAcc) {\n            acc = xs[i];\n            hasAcc = true;\n            continue;\n        }\n        acc = f(acc, xs[i], i);\n    }\n    return acc;\n};\n","/**\n * The history controller provides an ring-buffer\n */\nexport class HistoryController {\n  constructor(size) {\n    this.size = size;\n    this.entries = [];\n    this.cursor = 0;\n  }\n\n  /**\n   * Push an entry and maintain ring buffer size\n   */\n  push(entry) {\n    // Skip empty entries\n    if (entry.trim() === \"\") return;\n    // Skip duplicate entries\n    const lastEntry = this.entries[this.entries.length - 1];\n    if (entry == lastEntry) return;\n    // Keep track of entries\n    this.entries.push(entry);\n    if (this.entries.length > this.size) {\n      this.entries.pop(0);\n    }\n    this.cursor = this.entries.length;\n  }\n\n  /**\n   * Rewind history cursor on the last entry\n   */\n  rewind() {\n    this.cursor = this.entries.length;\n  }\n\n  /**\n   * Returns the previous entry\n   */\n  getPrevious() {\n    const idx = Math.max(0, this.cursor - 1);\n    this.cursor = idx;\n    return this.entries[idx];\n  }\n\n  /**\n   * Returns the next entry\n   */\n  getNext() {\n    const idx = Math.min(this.entries.length, this.cursor + 1);\n    this.cursor = idx;\n    return this.entries[idx];\n  }\n}\n","import { parse } from \"shell-quote\";\n\n/**\n * Detects all the word boundaries on the given input\n */\nexport function wordBoundaries(input, leftSide = true) {\n  let match;\n  const words = [];\n  const rx = /\\w+/g;\n\n  while ((match = rx.exec(input))) {\n    if (leftSide) {\n      words.push(match.index);\n    } else {\n      words.push(match.index + match[0].length);\n    }\n  }\n\n  return words;\n}\n\n/**\n * The closest left (or right) word boundary of the given input at the\n * given offset.\n */\nexport function closestLeftBoundary(input, offset) {\n  const found = wordBoundaries(input, true)\n    .reverse()\n    .find(x => x < offset);\n  return found == null ? 0 : found;\n}\nexport function closestRightBoundary(input, offset) {\n  const found = wordBoundaries(input, false).find(x => x > offset);\n  return found == null ? input.length : found;\n}\n\n/**\n * Convert offset at the given input to col/row location\n *\n * This function is not optimized and practically emulates via brute-force\n * the navigation on the terminal, wrapping when they reach the column width.\n */\nexport function offsetToColRow(input, offset, maxCols) {\n  let row = 0,\n    col = 0;\n\n  for (let i = 0; i < offset; ++i) {\n    const chr = input.charAt(i);\n    if (chr == \"\\n\") {\n      col = 0;\n      row += 1;\n    } else {\n      col += 1;\n      if (col > maxCols) {\n        col = 0;\n        row += 1;\n      }\n    }\n  }\n\n  return { row, col };\n}\n\n/**\n * Counts the lines in the given input\n */\nexport function countLines(input, maxCols) {\n  return offsetToColRow(input, input.length, maxCols).row + 1;\n}\n\n/**\n * Checks if there is an incomplete input\n *\n * An incomplete input is considered:\n * - An input that contains unterminated single quotes\n * - An input that contains unterminated double quotes\n * - An input that ends with \"\\\"\n * - An input that has an incomplete boolean shell expression (&& and ||)\n * - An incomplete pipe expression (|)\n */\nexport function isIncompleteInput(input) {\n  // Empty input is not incomplete\n  if (input.trim() == \"\") {\n    return false;\n  }\n\n  // Check for dangling single-quote strings\n  if ((input.match(/'/g) || []).length % 2 !== 0) {\n    return true;\n  }\n  // Check for dangling double-quote strings\n  if ((input.match(/\"/g) || []).length % 2 !== 0) {\n    return true;\n  }\n  // Check for dangling boolean or pipe operations\n  if (\n    input\n      .split(/(\\|\\||\\||&&)/g)\n      .pop()\n      .trim() == \"\"\n  ) {\n    return true;\n  }\n  // Check for tailing slash\n  if (input.endsWith(\"\\\\\") && !input.endsWith(\"\\\\\\\\\")) {\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * Returns true if the expression ends on a tailing whitespace\n */\nexport function hasTailingWhitespace(input) {\n  return input.match(/[^\\\\][ \\t]$/m) != null;\n}\n\n/**\n * Returns the last expression in the given input\n */\nexport function getLastToken(input) {\n  // Empty expressions\n  if (input.trim() === \"\") return \"\";\n  if (hasTailingWhitespace(input)) return \"\";\n\n  // Last token\n  const tokens = parse(input);\n  return tokens.pop() || \"\";\n}\n\n/**\n * Returns the auto-complete candidates for the given input\n */\nexport function collectAutocompleteCandidates(callbacks, input) {\n  const tokens = parse(input);\n  let index = tokens.length - 1;\n  let expr = tokens[index] || \"\";\n\n  // Empty expressions\n  if (input.trim() === \"\") {\n    index = 0;\n    expr = \"\";\n  } else if (hasTailingWhitespace(input)) {\n    // Expressions with danging space\n    index += 1;\n    expr = \"\";\n  }\n\n  // Collect all auto-complete candidates from the callbacks\n  const all = callbacks.reduce((candidates, { fn, args }) => {\n    try {\n      return candidates.concat(fn(index, tokens, ...args));\n    } catch (e) {\n      console.error(\"Auto-complete error:\", e);\n      return candidates;\n    }\n  }, []);\n\n  // Filter only the ones starting with the expression\n  return all.filter(txt => txt.startsWith(expr));\n}\n","import { HistoryController } from \"./HistoryController\";\nimport {\n  closestLeftBoundary,\n  closestRightBoundary,\n  collectAutocompleteCandidates,\n  countLines,\n  getLastToken,\n  hasTailingWhitespace,\n  isIncompleteInput,\n  offsetToColRow\n} from \"./Utils\";\n\n/**\n * A local terminal controller is responsible for displaying messages\n * and handling local echo for the terminal.\n *\n * Local echo supports most of bash-like input primitives. Namely:\n * - Arrow navigation on the input\n * - Alt-arrow for word-boundary navigation\n * - Alt-backspace for word-boundary deletion\n * - Multi-line input for incomplete commands\n * - Auto-complete hooks\n */\nexport default class LocalEchoController {\n  constructor(term, options = {}) {\n    this.term = term;\n    this.term.on(\"data\", this.handleTermData.bind(this));\n    this.term.on(\"resize\", this.handleTermResize.bind(this));\n    this.history = new HistoryController(options.historySize || 10);\n    this.maxAutocompleteEntries = options.maxAutocompleteEntries || 100;\n\n    this._autocompleteHandlers = [];\n    this._active = false;\n    this._input = \"\";\n    this._cursor = 0;\n    this._activePrompt = null;\n    this._activeCharPrompt = null;\n    this._termSize = {\n      cols: this.term.cols,\n      rows: this.term.rows\n    };\n  }\n\n  /////////////////////////////////////////////////////////////////////////////\n  // User-Facing API\n  /////////////////////////////////////////////////////////////////////////////\n\n  /**\n   * Register a handler that will be called to satisfy auto-completion\n   */\n  addAutocompleteHandler(fn, ...args) {\n    this._autocompleteHandlers.push({\n      fn,\n      args\n    });\n  }\n\n  /**\n   * Remove a previously registered auto-complete handler\n   */\n  removeAutocompleteHandler(fn) {\n    const idx = this._autocompleteHandlers.findIndex(e => e.fn === fn);\n    if (idx === -1) return;\n\n    this._autocompleteHandlers.splice(idx, 1);\n  }\n\n  /**\n   * Return a promise that will resolve when the user has completed\n   * typing a single line\n   */\n  read(prompt, continuationPrompt = \"> \") {\n    return new Promise((resolve, reject) => {\n      this.term.write(prompt);\n      this._activePrompt = {\n        prompt,\n        continuationPrompt,\n        resolve,\n        reject\n      };\n\n      this._input = \"\";\n      this._cursor = 0;\n      this._active = true;\n    });\n  }\n\n  /**\n   * Return a promise that will be resolved when the user types a single\n   * character.\n   *\n   * This can be active in addition to `.read()` and will be resolved in\n   * priority before it.\n   */\n  readChar(prompt) {\n    return new Promise((resolve, reject) => {\n      this.term.write(prompt);\n      this._activeCharPrompt = {\n        prompt,\n        resolve,\n        reject\n      };\n    });\n  }\n\n  /**\n   * Abort a pending read operation\n   */\n  abortRead(reason = \"aborted\") {\n    if (this._activePrompt != null || this._activeCharPrompt != null) {\n      this.term.write(\"\\r\\n\");\n    }\n    if (this._activePrompt != null) {\n      this._activePrompt.reject(reason);\n      this._activePrompt = null;\n    }\n    if (this._activeCharPrompt != null) {\n      this._activeCharPrompt.reject(reason);\n      this._activeCharPrompt = null;\n    }\n    this._active = false;\n  }\n\n  /**\n   * Prints a message and changes line\n   */\n  println(message) {\n    this.print(message + \"\\n\");\n  }\n\n  /**\n   * Prints a message and properly handles new-lines\n   */\n  print(message) {\n    const normInput = message.replace(/[\\r\\n]+/g, \"\\n\");\n    this.term.write(normInput.replace(/\\n/g, \"\\r\\n\"));\n  }\n\n  /**\n   * Prints a list of items using a wide-format\n   */\n  printWide(items, padding = 2) {\n    if (items.length == 0) return println(\"\");\n\n    // Compute item sizes and matrix row/cols\n    const itemWidth =\n      items.reduce((width, item) => Math.max(width, item.length), 0) + padding;\n    const wideCols = Math.floor(this._termSize.cols / itemWidth);\n    const wideRows = Math.ceil(items.length / wideCols);\n\n    // Print matrix\n    let i = 0;\n    for (let row = 0; row < wideRows; ++row) {\n      let rowStr = \"\";\n\n      // Prepare columns\n      for (let col = 0; col < wideCols; ++col) {\n        if (i < items.length) {\n          let item = items[i++];\n          item += \" \".repeat(itemWidth - item.length);\n          rowStr += item;\n        }\n      }\n      this.println(rowStr);\n    }\n  }\n\n  /////////////////////////////////////////////////////////////////////////////\n  // Internal API\n  /////////////////////////////////////////////////////////////////////////////\n\n  /**\n   * Apply prompts to the given input\n   */\n  applyPrompts(input) {\n    const prompt = (this._activePrompt || {}).prompt || \"\";\n    const continuationPrompt =\n      (this._activePrompt || {}).continuationPrompt || \"\";\n\n    return prompt + input.replace(/\\n/g, \"\\n\" + continuationPrompt);\n  }\n\n  /**\n   * Advances the `offset` as required in order to accompany the prompt\n   * additions to the input.\n   */\n  applyPromptOffset(input, offset) {\n    const newInput = this.applyPrompts(input.substr(0, offset));\n    return newInput.length;\n  }\n\n  /**\n   * Clears the current prompt\n   *\n   * This function will erase all the lines that display the current prompt\n   * and move the cursor in the beginning of the first line of the prompt.\n   */\n  clearInput() {\n    const currentPrompt = this.applyPrompts(this._input);\n\n    // Get the overall number of lines to clear\n    const allRows = countLines(currentPrompt, this._termSize.cols);\n\n    // Get the line we are currently in\n    const promptCursor = this.applyPromptOffset(this._input, this._cursor);\n    const { col, row } = offsetToColRow(\n      currentPrompt,\n      promptCursor,\n      this._termSize.cols\n    );\n\n    // First move on the last line\n    const moveRows = allRows - row - 1;\n    for (var i = 0; i < moveRows; ++i) this.term.write(\"\\x1B[E\");\n\n    // Clear current input line(s)\n    this.term.write(\"\\r\\x1B[K\");\n    for (var i = 1; i < allRows; ++i) this.term.write(\"\\x1B[F\\x1B[K\");\n  }\n\n  /**\n   * Replace input with the new input given\n   *\n   * This function clears all the lines that the current input occupies and\n   * then replaces them with the new input.\n   */\n  setInput(newInput, clearInput = true) {\n    // Clear current input\n    if (clearInput) this.clearInput();\n\n    // Write the new input lines, including the current prompt\n    const newPrompt = this.applyPrompts(newInput);\n    this.print(newPrompt);\n\n    // Trim cursor overflow\n    if (this._cursor > newInput.length) {\n      this._cursor = newInput.length;\n    }\n\n    // Move the cursor to the appropriate row/col\n    const newCursor = this.applyPromptOffset(newInput, this._cursor);\n    const newLines = countLines(newPrompt, this._termSize.cols);\n    const { col, row } = offsetToColRow(\n      newPrompt,\n      newCursor,\n      this._termSize.cols\n    );\n    const moveUpRows = newLines - row - 1;\n\n    this.term.write(\"\\r\");\n    for (var i = 0; i < moveUpRows; ++i) this.term.write(\"\\x1B[F\");\n    for (var i = 0; i < col; ++i) this.term.write(\"\\x1B[C\");\n\n    // Replace input\n    this._input = newInput;\n  }\n\n  /**\n   * This function completes the current input, calls the given callback\n   * and then re-displays the prompt.\n   */\n  printAndRestartPrompt(callback) {\n    const cursor = this._cursor;\n\n    // Complete input\n    this.setCursor(this._input.length);\n    this.term.write(\"\\r\\n\");\n\n    // Prepare a function that will resume prompt\n    const resume = () => {\n      this._cursor = cursor;\n      this.setInput(this._input);\n    };\n\n    // Call the given callback to echo something, and if there is a promise\n    // returned, wait for the resolution before resuming prompt.\n    const ret = callback();\n    if (ret == null) {\n      resume();\n    } else {\n      ret.then(resume);\n    }\n  }\n\n  /**\n   * Set the new cursor position, as an offset on the input string\n   *\n   * This function:\n   * - Calculates the previous and current\n   */\n  setCursor(newCursor) {\n    if (newCursor < 0) newCursor = 0;\n    if (newCursor > this._input.length) newCursor = this._input.length;\n\n    // Apply prompt formatting to get the visual status of the display\n    const inputWithPrompt = this.applyPrompts(this._input);\n    const inputLines = countLines(inputWithPrompt, this._termSize.cols);\n\n    // Estimate previous cursor position\n    const prevPromptOffset = this.applyPromptOffset(this._input, this._cursor);\n    const { col: prevCol, row: prevRow } = offsetToColRow(\n      inputWithPrompt,\n      prevPromptOffset,\n      this._termSize.cols\n    );\n\n    // Estimate next cursor position\n    const newPromptOffset = this.applyPromptOffset(this._input, newCursor);\n    const { col: newCol, row: newRow } = offsetToColRow(\n      inputWithPrompt,\n      newPromptOffset,\n      this._termSize.cols\n    );\n\n    // Adjust vertically\n    if (newRow > prevRow) {\n      for (let i = prevRow; i < newRow; ++i) this.term.write(\"\\x1B[B\");\n    } else {\n      for (let i = newRow; i < prevRow; ++i) this.term.write(\"\\x1B[A\");\n    }\n\n    // Adjust horizontally\n    if (newCol > prevCol) {\n      for (let i = prevCol; i < newCol; ++i) this.term.write(\"\\x1B[C\");\n    } else {\n      for (let i = newCol; i < prevCol; ++i) this.term.write(\"\\x1B[D\");\n    }\n\n    // Set new offset\n    this._cursor = newCursor;\n  }\n\n  /**\n   * Move cursor at given direction\n   */\n  handleCursorMove(dir) {\n    if (dir > 0) {\n      const num = Math.min(dir, this._input.length - this._cursor);\n      this.setCursor(this._cursor + num);\n    } else if (dir < 0) {\n      const num = Math.max(dir, -this._cursor);\n      this.setCursor(this._cursor + num);\n    }\n  }\n\n  /**\n   * Erase a character at cursor location\n   */\n  handleCursorErase(backspace) {\n    const { _cursor, _input } = this;\n    if (backspace) {\n      if (_cursor <= 0) return;\n      const newInput = _input.substr(0, _cursor - 1) + _input.substr(_cursor);\n      this.clearInput();\n      this._cursor -= 1;\n      this.setInput(newInput, false);\n    } else {\n      const newInput = _input.substr(0, _cursor) + _input.substr(_cursor + 1);\n      this.setInput(newInput);\n    }\n  }\n\n  /**\n   * Insert character at cursor location\n   */\n  handleCursorInsert(data) {\n    const { _cursor, _input } = this;\n    const newInput = _input.substr(0, _cursor) + data + _input.substr(_cursor);\n    this._cursor += data.length;\n    this.setInput(newInput);\n  }\n\n  /**\n   * Handle input completion\n   */\n  handleReadComplete() {\n    if (this.history) {\n      this.history.push(this._input);\n    }\n    if (this._activePrompt) {\n      this._activePrompt.resolve(this._input);\n      this._activePrompt = null;\n    }\n    this.term.write(\"\\r\\n\");\n    this._active = false;\n  }\n\n  /**\n   * Handle terminal resize\n   *\n   * This function clears the prompt using the previous configuration,\n   * updates the cached terminal size information and then re-renders the\n   * input. This leads (most of the times) into a better formatted input.\n   */\n  handleTermResize(data) {\n    const { rows, cols } = data;\n    this.clearInput();\n    this._termSize = { cols, rows };\n    this.setInput(this._input, false);\n  }\n\n  /**\n   * Handle terminal input\n   */\n  handleTermData(data) {\n    if (!this._active) return;\n\n    // If we have an active character prompt, satisfy it in priority\n    if (this._activeCharPrompt != null) {\n      this._activeCharPrompt.resolve(data);\n      this._activeCharPrompt = null;\n      this.term.write(\"\\r\\n\");\n      return;\n    }\n\n    // If this looks like a pasted input, expand it\n    if (data.length > 3 && data.charCodeAt(0) !== 0x1b) {\n      const normData = data.replace(/[\\r\\n]+/g, \"\\r\");\n      Array.from(normData).forEach(c => this.handleData(c));\n    } else {\n      this.handleData(data);\n    }\n  }\n\n  /**\n   * Handle a single piece of information from the terminal.\n   */\n  handleData(data) {\n    if (!this._active) return;\n    const ord = data.charCodeAt(0);\n    let ofs;\n\n    // Handle ANSI escape sequences\n    if (ord == 0x1b) {\n      switch (data.substr(1)) {\n        case \"[A\": // Up arrow\n          if (this.history) {\n            let value = this.history.getPrevious();\n            if (value) {\n              this.setInput(value);\n              this.setCursor(value.length);\n            }\n          }\n          break;\n\n        case \"[B\": // Down arrow\n          if (this.history) {\n            let value = this.history.getNext();\n            if (!value) value = \"\";\n            this.setInput(value);\n            this.setCursor(value.length);\n          }\n          break;\n\n        case \"[D\": // Left Arrow\n          this.handleCursorMove(-1);\n          break;\n\n        case \"[C\": // Right Arrow\n          this.handleCursorMove(1);\n          break;\n\n        case \"[3~\": // Delete\n          this.handleCursorErase(false);\n          break;\n\n        case \"[F\": // End\n          this.setCursor(this._input.length);\n          break;\n\n        case \"[H\": // Home\n          this.setCursor(0);\n          break;\n\n        case \"b\": // ALT + LEFT\n          ofs = closestLeftBoundary(this._input, this._cursor);\n          if (ofs != null) this.setCursor(ofs);\n          break;\n\n        case \"f\": // ALT + RIGHT\n          ofs = closestRightBoundary(this._input, this._cursor);\n          if (ofs != null) this.setCursor(ofs);\n          break;\n\n        case \"\\x7F\": // CTRL + BACKSPACE\n          ofs = closestLeftBoundary(this._input, this._cursor);\n          if (ofs != null) {\n            this.setInput(\n              this._input.substr(0, ofs) + this._input.substr(this._cursor)\n            );\n            this.setCursor(ofs);\n          }\n          break;\n      }\n\n      // Handle special characters\n    } else if (ord < 32 || ord === 0x7f) {\n      switch (data) {\n        case \"\\r\": // ENTER\n          if (isIncompleteInput(this._input)) {\n            this.handleCursorInsert(\"\\n\");\n          } else {\n            this.handleReadComplete();\n          }\n          break;\n\n        case \"\\x7F\": // BACKSPACE\n          this.handleCursorErase(true);\n          break;\n\n        case \"\\t\": // TAB\n          if (this._autocompleteHandlers.length > 0) {\n            const inputFragment = this._input.substr(0, this._cursor);\n            const hasTailingSpace = hasTailingWhitespace(inputFragment);\n            const candidates = collectAutocompleteCandidates(\n              this._autocompleteHandlers,\n              inputFragment\n            );\n\n            // Sort candidates\n            candidates.sort();\n\n            // Depending on the number of candidates, we are handing them in\n            // a different way.\n            if (candidates.length === 0) {\n              // No candidates? Just add a space if there is none already\n              if (!hasTailingSpace) {\n                this.handleCursorInsert(\" \");\n              }\n            } else if (candidates.length === 1) {\n              // Just a single candidate? Complete\n              const lastToken = getLastToken(inputFragment);\n              this.handleCursorInsert(\n                candidates[0].substr(lastToken.length) + \" \"\n              );\n            } else if (candidates.length <= this.maxAutocompleteEntries) {\n              // If we are less than maximum auto-complete candidates, print\n              // them to the user and re-start prompt\n              this.printAndRestartPrompt(() => {\n                this.printWide(candidates);\n              });\n            } else {\n              // If we have more than maximum auto-complete candidates, print\n              // them only if the user acknowledges a warning\n              this.printAndRestartPrompt(() =>\n                this.readChar(\n                  `Display all ${candidates.length} possibilities? (y or n)`\n                ).then(yn => {\n                  if (yn == \"y\" || yn == \"Y\") {\n                    this.printWide(candidates);\n                  }\n                })\n              );\n            }\n          } else {\n            this.handleCursorInsert(\"    \");\n          }\n          break;\n\n        case \"\\x03\": // CTRL+C\n          this.setCursor(this._input.length);\n          this.term.write(\"^C\\r\\n\" + ((this._activePrompt || {}).prompt || \"\"));\n          this._input = \"\";\n          this._cursor = 0;\n          if (this.history) this.history.rewind();\n          break;\n      }\n\n      // Handle visible characters\n    } else {\n      this.handleCursorInsert(data);\n    }\n  }\n}\n","import LocalEchoController from \"./lib/LocalEchoController\";\nexport { HistoryController } from './lib/HistoryController';\n\nexport default LocalEchoController;\n"],"sourceRoot":""}